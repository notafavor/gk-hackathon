version: "3"
services:
  client:
    # frontend
    stdin_open: true
    image: front:prod
    build:
      dockerfile: Dockerfile.node
      context: ./client
    ports:
      - 3000:3000
      - 80:80
      - 443:443
    volumes:
      - /data/nginx/certs:/etc/nginx/certs
      - /data/team5/client/nginx/prod.conf:/etc/nginx/conf.d/team5.opvk.tech.conf
      - /data/team5/backend/static/:/opt/app/staticfiles/
      - /data/team5/backend/media/:/opt/app/media/
    depends_on:
      - db
      - api
  api:
    # backend
    image: api:prod
    build:
      context: ./backend
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - /data/team5/backend/media/:/opt/app/media/
      - /data/team5/backend/static/:/opt/app/staticfiles/
    ports:
      - 8000:8000
    env_file:
      - .env
    depends_on:
      - db
      - migrations
      # - minio
  db:
    # сервис БД
    image: "postgres:16.2-alpine3.19"
    ports:
      - 5432:5432
    volumes:
      - /data/postgres/data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_DB=${DB_NAME}
    restart: always
    # healthcheck:
    #   test: [ "CMD-SHELL", "pg_isready -d ${DB_NAME} -U ${DB_USER}" ]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5
  # minio:
  #   # хранилище S3
  #   image: minio/minio:latest
  #   volumes:
  #     - ./minio_data/:/data
  #   ports:
  #     - "9000:9000"
  #     - "9090:9090"
  #   env_file:
  #     - .env
  #   environment:
  #     MINIO_ACCESS_KEY: ${MINIO_ACCESS}
  #     MINIO_SECRET_KEY: ${SECRET}
  #     MINIO_ROOT_USER: ${MINIO_USER}
  #     MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
  #   command: server --console-address ":9090" /data
  #   healthcheck:
  #     test:
  #       [
  #         "CMD",
  #         "curl",
  #         "-f",
  #         "http://localhost:9000/minio/health/live"
  #       ]
  #     interval: 30s
  #     timeout: 20s
  #     retries: 3
  migrations:
    # миграции django
    image: api_migrations:prod
    build:
      context: ./backend
    command: >
      sh -c "python manage.py collectstatic --noinput &&
             python manage.py makemigrations &&
             python manage.py migrate"
    volumes:
      - /data/team5/backend/static/:/opt/app/staticfiles/
    env_file:
      - .env
    depends_on:
      - db
  celery:
    build: ./backend
    command: celery -A root worker -l info
    volumes:
      - /data/team5/backend/media/:/opt/app/media/
    depends_on:
      - redis
    env_file:
      - .env
  # celery-beat:
  #   build: ./project
  #   command: celery -A core beat -l info
  #   volumes:
  #     - ./backend/:/opt/app/
  #   depends_on:
  #     - redis
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"